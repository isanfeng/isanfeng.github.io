<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-11-03T16:14:00+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">（流浪.三丰）’s blog</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</subtitle><author><name>流浪.三丰</name></author><entry><title type="html">哈哈哈哈</title><link href="http://localhost:4000/github-workflow/" rel="alternate" type="text/html" title="哈哈哈哈" /><published>2020-11-02T20:16:00+08:00</published><updated>2020-11-02T20:16:00+08:00</updated><id>http://localhost:4000/github-workflow</id><content type="html" xml:base="http://localhost:4000/github-workflow/">&lt;p&gt;&lt;span style=&quot;font-size:12px&quot;&gt;Publish by &lt;a href=&quot;https://isanfeng.github.io&quot; target=&quot;\_blank&quot;&gt;isanfeng&lt;/a&gt; &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;#Github Workflow
###第一步：从仓库中fork项目&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;访问目标仓库：https://&lt;/li&gt;
  &lt;li&gt;点击页面上的fork，将目标项目复制到自己的仓库中
    &lt;blockquote&gt;
      &lt;p&gt;&lt;strong&gt;clone和fork的区别&lt;/strong&gt;&lt;br /&gt;
比如在仓库的主人（A）没有把我们添加为项目合作者的前提下，我们将A的某个仓库名为“B”的仓库clone到自己的电脑中，在自己的电脑进行修改，但是我们会发现我们没办法通过push将代码贡献到B中。所以要想将你的代码贡献到B中，
我们应该：
在A的仓库中fork项目B （此时我们自己的github就有一个一模一样的仓库B，但是URL不同）, 将我们修改的代码push到自己github中的仓库B中pull request ，主人就会收到请求，并决定要不要接受你的代码
###第二步：Clone刚fork的项目到本地&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;mkdir -p $working_dir
 cd $working_dir
 git clone https://github.com/$user/github-workflow.git
 # or: git clone git@github.com:$user/github-workflow.git&lt;/p&gt;

    &lt;p&gt;cd $working_dir/github-workflow
 git remote add upstream https://github.com/yangwenmai/github-workflow.git
 # or: git remote add upstream git@github.com:yangwenmai/github-workflow.git
 # Never push to the upstream master.
 git remote set-url –push upstream no_push
 # Confirm that your remotes make sense:
 # It should look like:
 # origin    git@github.com:$(user)/github-workflow.git (fetch)
 # origin    git@github.com:$(user)/github-workflow.git (push)
 # upstream  https://github.com/yangwenmai/github-workflow (fetch)
 # upstream  no_push (push)
 git remote -v&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;###第三步：开新分支&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd $working_dir/github-workflow
git fetch upstream
git checkout master
git rebase upstream/master 从master分支开新的特性分支
 
git checkout -b myfeature
# or: gcb myfeature ###第四步：开发 ####编码 你可以在你新创建的 myfeature 分支下编码。 ###第五步：保持你的特性分支 myfeature 是一直同步原始仓库的最新 master 代码

# While on your myfeature branch.
git fetch upstream
git rebase upstream/master 请不要用 git pull 代替 fetch/rebase，git pull 会创建一个 merge，并且会创建 merge commits。这些会使提交记录混乱和违反规则。你也可以考虑改变你的 .git/config 文件，通过 git config branch.autoSetupRebase 来改变 git pull 行为。 ###第六步：提交 提交你的变更

git commit ###第七步：推送

git push --set-upstream ${your_remote_name} myfeature ###第八步：创建一个push request 1. 访问你 fork 的项目：https://github.com/$user/github-workflow 2. 点击 Compare &amp;amp; Pull Request 按钮，基于你的 myfeature 分支 3. 填充必要的 PR 模板信息。 *** 接下来你就只需要等待原始项目的开发人员来审核你的提交即可。 以后如果你还要再开发新的特性或者修复一些 bug，你需要先同步更新项目，然后再创建新的分支，然后都可以按照以上步骤执行。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>isanfeng</name></author><category term="TEST2" /><category term="TEST1" /><summary type="html">Publish by isanfeng</summary></entry><entry><title type="html">Hello World！我的个人网站</title><link href="http://localhost:4000/github-workflow/" rel="alternate" type="text/html" title="Hello World！我的个人网站" /><published>2018-02-07T20:16:00+08:00</published><updated>2018-02-07T20:16:00+08:00</updated><id>http://localhost:4000/github-workflow</id><content type="html" xml:base="http://localhost:4000/github-workflow/">&lt;p&gt;&lt;span style=&quot;font-size:12px&quot;&gt;Publish by &lt;a href=&quot;https://isanfeng.github.io&quot; target=&quot;\_blank&quot;&gt;isanfeng&lt;/a&gt; &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;#Github Workflow
###第一步：从仓库中fork项目&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;访问目标仓库：https://&lt;/li&gt;
  &lt;li&gt;点击页面上的fork，将目标项目复制到自己的仓库中
    &lt;blockquote&gt;
      &lt;p&gt;&lt;strong&gt;clone和fork的区别&lt;/strong&gt;&lt;br /&gt;
比如在仓库的主人（A）没有把我们添加为项目合作者的前提下，我们将A的某个仓库名为“B”的仓库clone到自己的电脑中，在自己的电脑进行修改，但是我们会发现我们没办法通过push将代码贡献到B中。所以要想将你的代码贡献到B中，
我们应该：
在A的仓库中fork项目B （此时我们自己的github就有一个一模一样的仓库B，但是URL不同）, 将我们修改的代码push到自己github中的仓库B中pull request ，主人就会收到请求，并决定要不要接受你的代码
###第二步：Clone刚fork的项目到本地&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;mkdir -p $working_dir
 cd $working_dir
 git clone https://github.com/$user/github-workflow.git
 # or: git clone git@github.com:$user/github-workflow.git&lt;/p&gt;

    &lt;p&gt;cd $working_dir/github-workflow
 git remote add upstream https://github.com/yangwenmai/github-workflow.git
 # or: git remote add upstream git@github.com:yangwenmai/github-workflow.git
 # Never push to the upstream master.
 git remote set-url –push upstream no_push
 # Confirm that your remotes make sense:
 # It should look like:
 # origin    git@github.com:$(user)/github-workflow.git (fetch)
 # origin    git@github.com:$(user)/github-workflow.git (push)
 # upstream  https://github.com/yangwenmai/github-workflow (fetch)
 # upstream  no_push (push)
 git remote -v&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;###第三步：开新分支&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd $working_dir/github-workflow
git fetch upstream
git checkout master
git rebase upstream/master 从master分支开新的特性分支
 
git checkout -b myfeature
# or: gcb myfeature ###第四步：开发 ####编码 你可以在你新创建的 myfeature 分支下编码。 ###第五步：保持你的特性分支 myfeature 是一直同步原始仓库的最新 master 代码

# While on your myfeature branch.
git fetch upstream
git rebase upstream/master 请不要用 git pull 代替 fetch/rebase，git pull 会创建一个 merge，并且会创建 merge commits。这些会使提交记录混乱和违反规则。你也可以考虑改变你的 .git/config 文件，通过 git config branch.autoSetupRebase 来改变 git pull 行为。 ###第六步：提交 提交你的变更

git commit ###第七步：推送

git push --set-upstream ${your_remote_name} myfeature ###第八步：创建一个push request 1. 访问你 fork 的项目：https://github.com/$user/github-workflow 2. 点击 Compare &amp;amp; Pull Request 按钮，基于你的 myfeature 分支 3. 填充必要的 PR 模板信息。 *** 接下来你就只需要等待原始项目的开发人员来审核你的提交即可。 以后如果你还要再开发新的特性或者修复一些 bug，你需要先同步更新项目，然后再创建新的分支，然后都可以按照以上步骤执行。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>流浪.三丰</name></author><category term="TEST2" /><category term="TEST1" /><summary type="html">Publish by isanfeng</summary></entry><entry><title type="html">Hello World！我的个人网站</title><link href="http://localhost:4000/github-workflow/" rel="alternate" type="text/html" title="Hello World！我的个人网站" /><published>2018-02-07T20:16:00+08:00</published><updated>2018-02-07T20:16:00+08:00</updated><id>http://localhost:4000/github-workflow</id><content type="html" xml:base="http://localhost:4000/github-workflow/">&lt;p&gt;&lt;span style=&quot;font-size:12px&quot;&gt;Publish by &lt;a href=&quot;https://isanfeng.github.io&quot; target=&quot;\_blank&quot;&gt;isanfeng&lt;/a&gt; &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;#Github Workflow
###第一步：从仓库中fork项目&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;访问目标仓库：https://&lt;/li&gt;
  &lt;li&gt;点击页面上的fork，将目标项目复制到自己的仓库中
    &lt;blockquote&gt;
      &lt;p&gt;&lt;strong&gt;clone和fork的区别&lt;/strong&gt;&lt;br /&gt;
比如在仓库的主人（A）没有把我们添加为项目合作者的前提下，我们将A的某个仓库名为“B”的仓库clone到自己的电脑中，在自己的电脑进行修改，但是我们会发现我们没办法通过push将代码贡献到B中。所以要想将你的代码贡献到B中，
我们应该：
在A的仓库中fork项目B （此时我们自己的github就有一个一模一样的仓库B，但是URL不同）, 将我们修改的代码push到自己github中的仓库B中pull request ，主人就会收到请求，并决定要不要接受你的代码
###第二步：Clone刚fork的项目到本地&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;mkdir -p $working_dir
 cd $working_dir
 git clone https://github.com/$user/github-workflow.git
 # or: git clone git@github.com:$user/github-workflow.git&lt;/p&gt;

    &lt;p&gt;cd $working_dir/github-workflow
 git remote add upstream https://github.com/yangwenmai/github-workflow.git
 # or: git remote add upstream git@github.com:yangwenmai/github-workflow.git
 # Never push to the upstream master.
 git remote set-url –push upstream no_push
 # Confirm that your remotes make sense:
 # It should look like:
 # origin    git@github.com:$(user)/github-workflow.git (fetch)
 # origin    git@github.com:$(user)/github-workflow.git (push)
 # upstream  https://github.com/yangwenmai/github-workflow (fetch)
 # upstream  no_push (push)
 git remote -v&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;###第三步：开新分支&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd $working_dir/github-workflow
git fetch upstream
git checkout master
git rebase upstream/master 从master分支开新的特性分支
 
git checkout -b myfeature
# or: gcb myfeature ###第四步：开发 ####编码 你可以在你新创建的 myfeature 分支下编码。 ###第五步：保持你的特性分支 myfeature 是一直同步原始仓库的最新 master 代码

# While on your myfeature branch.
git fetch upstream
git rebase upstream/master 请不要用 git pull 代替 fetch/rebase，git pull 会创建一个 merge，并且会创建 merge commits。这些会使提交记录混乱和违反规则。你也可以考虑改变你的 .git/config 文件，通过 git config branch.autoSetupRebase 来改变 git pull 行为。 ###第六步：提交 提交你的变更

git commit ###第七步：推送

git push --set-upstream ${your_remote_name} myfeature ###第八步：创建一个push request 1. 访问你 fork 的项目：https://github.com/$user/github-workflow 2. 点击 Compare &amp;amp; Pull Request 按钮，基于你的 myfeature 分支 3. 填充必要的 PR 模板信息。 *** 接下来你就只需要等待原始项目的开发人员来审核你的提交即可。 以后如果你还要再开发新的特性或者修复一些 bug，你需要先同步更新项目，然后再创建新的分支，然后都可以按照以上步骤执行。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>流浪.三丰</name></author><category term="TEST1" /><summary type="html">Publish by isanfeng</summary></entry><entry><title type="html">Hello World！我的个人网站</title><link href="http://localhost:4000/hello-world/" rel="alternate" type="text/html" title="Hello World！我的个人网站" /><published>2018-02-07T20:16:00+08:00</published><updated>2018-02-07T20:16:00+08:00</updated><id>http://localhost:4000/hello-world</id><content type="html" xml:base="http://localhost:4000/hello-world/">&lt;p&gt;&lt;span style=&quot;font-size:12px&quot;&gt;Publish by &lt;a href=&quot;https://isanfeng.github.io&quot; target=&quot;\_blank&quot;&gt;isanfeng&lt;/a&gt; &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Hello World！&lt;/p&gt;

&lt;p&gt;经过一段业余时间的修整，由我亲手修改打造的个人网站终于问世啦！特发表一篇文章记录下🙂&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;本网站有如下特点：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;网站托管于github，免费且无限流量,可指向自己的域名；&lt;/li&gt;
  &lt;li&gt;里面所有文章，资源，源码均放在自己电脑上,发布上传到github即可；&lt;/li&gt;
  &lt;li&gt;样式、排版、功能完全都可以按照自己需求去改动，具极大的灵活性，懂web的小伙伴能打造出更酷炫属于自己的网站哦；&lt;/li&gt;
  &lt;li&gt;网站为轻量级个人网站，无需个人的服务器及数据库&lt;/li&gt;
  &lt;li&gt;网站支持百度统计、谷歌统计；&lt;/li&gt;
  &lt;li&gt;网站兼容移动端浏览；&lt;/li&gt;
  &lt;li&gt;网站支持页面回到顶部功能；&lt;/li&gt;
  &lt;li&gt;网站支持分类文章数量统计&lt;/li&gt;
  &lt;li&gt;网站首页文章支持分页查看&lt;/li&gt;
  &lt;li&gt;文章支持分类存放；&lt;/li&gt;
  &lt;li&gt;文章支持搜索功能；&lt;/li&gt;
  &lt;li&gt;文章支持留言功能；&lt;/li&gt;
  &lt;li&gt;文章支持打赏功能；&lt;/li&gt;
  &lt;li&gt;文章支持分享；&lt;/li&gt;
  &lt;li&gt;文章支持浏览数量统计；&lt;/li&gt;
  &lt;li&gt;文章支持上一篇，下一篇查看；&lt;/li&gt;
  &lt;li&gt;文章支持tag标签标记；&lt;/li&gt;
  &lt;li&gt;文章支持底部最近文章查看；&lt;/li&gt;
  &lt;li&gt;文章编写均支持markdown，基于jekyll编译可实时预览文章；&lt;/li&gt;
  &lt;li&gt;在jekyll或者hexo官网有许多个人网站模板，可找到自己喜欢的进行修改&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;本网站简约舒适，后续出將推出本站详细搭站过程及收纳优质技术类博客及自己原创博客。&lt;br /&gt;有兴趣的小伙伴欢迎点击star&lt;a href=&quot;https://github.com/leach-chen/blogdemo&quot; style=&quot;text-decoration:none;&quot; target=&quot;blank&quot; title=&quot;本站源码，欢迎前往点击star&quot;&gt;本站源码&lt;/a&gt;&lt;/p&gt;</content><author><name>流浪.三丰</name></author><category term="TEST2" /><summary type="html">Publish by isanfeng</summary></entry><entry><title type="html">Hello World！我的个人网站</title><link href="http://localhost:4000/github-workflow/" rel="alternate" type="text/html" title="Hello World！我的个人网站" /><published>2018-02-07T20:16:00+08:00</published><updated>2018-02-07T20:16:00+08:00</updated><id>http://localhost:4000/github-workflow</id><content type="html" xml:base="http://localhost:4000/github-workflow/">&lt;p&gt;&lt;span style=&quot;font-size:12px&quot;&gt;Publish by &lt;a href=&quot;https://isanfeng.github.io&quot; target=&quot;\_blank&quot;&gt;isanfeng&lt;/a&gt; &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;#Github Workflow
###第一步：从仓库中fork项目&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;访问目标仓库：https://&lt;/li&gt;
  &lt;li&gt;点击页面上的fork，将目标项目复制到自己的仓库中
    &lt;blockquote&gt;
      &lt;p&gt;&lt;strong&gt;clone和fork的区别&lt;/strong&gt;&lt;br /&gt;
比如在仓库的主人（A）没有把我们添加为项目合作者的前提下，我们将A的某个仓库名为“B”的仓库clone到自己的电脑中，在自己的电脑进行修改，但是我们会发现我们没办法通过push将代码贡献到B中。所以要想将你的代码贡献到B中，
我们应该：
在A的仓库中fork项目B （此时我们自己的github就有一个一模一样的仓库B，但是URL不同）, 将我们修改的代码push到自己github中的仓库B中pull request ，主人就会收到请求，并决定要不要接受你的代码
###第二步：Clone刚fork的项目到本地&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;mkdir -p $working_dir
 cd $working_dir
 git clone https://github.com/$user/github-workflow.git
 # or: git clone git@github.com:$user/github-workflow.git&lt;/p&gt;

    &lt;p&gt;cd $working_dir/github-workflow
 git remote add upstream https://github.com/yangwenmai/github-workflow.git
 # or: git remote add upstream git@github.com:yangwenmai/github-workflow.git
 # Never push to the upstream master.
 git remote set-url –push upstream no_push
 # Confirm that your remotes make sense:
 # It should look like:
 # origin    git@github.com:$(user)/github-workflow.git (fetch)
 # origin    git@github.com:$(user)/github-workflow.git (push)
 # upstream  https://github.com/yangwenmai/github-workflow (fetch)
 # upstream  no_push (push)
 git remote -v&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;###第三步：开新分支&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd $working_dir/github-workflow
git fetch upstream
git checkout master
git rebase upstream/master 从master分支开新的特性分支
 
git checkout -b myfeature
# or: gcb myfeature ###第四步：开发 ####编码 你可以在你新创建的 myfeature 分支下编码。 ###第五步：保持你的特性分支 myfeature 是一直同步原始仓库的最新 master 代码

# While on your myfeature branch.
git fetch upstream
git rebase upstream/master 请不要用 git pull 代替 fetch/rebase，git pull 会创建一个 merge，并且会创建 merge commits。这些会使提交记录混乱和违反规则。你也可以考虑改变你的 .git/config 文件，通过 git config branch.autoSetupRebase 来改变 git pull 行为。 ###第六步：提交 提交你的变更

git commit ###第七步：推送

git push --set-upstream ${your_remote_name} myfeature ###第八步：创建一个push request 1. 访问你 fork 的项目：https://github.com/$user/github-workflow 2. 点击 Compare &amp;amp; Pull Request 按钮，基于你的 myfeature 分支 3. 填充必要的 PR 模板信息。 *** 接下来你就只需要等待原始项目的开发人员来审核你的提交即可。 以后如果你还要再开发新的特性或者修复一些 bug，你需要先同步更新项目，然后再创建新的分支，然后都可以按照以上步骤执行。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>流浪.三丰</name></author><category term="TEST1" /><summary type="html">Publish by isanfeng</summary></entry><entry><title type="html">Hello World！我的个人网站</title><link href="http://localhost:4000/github-workflow/" rel="alternate" type="text/html" title="Hello World！我的个人网站" /><published>2018-02-07T20:16:00+08:00</published><updated>2018-02-07T20:16:00+08:00</updated><id>http://localhost:4000/github-workflow</id><content type="html" xml:base="http://localhost:4000/github-workflow/">&lt;p&gt;&lt;span style=&quot;font-size:12px&quot;&gt;Publish by &lt;a href=&quot;https://isanfeng.github.io&quot; target=&quot;\_blank&quot;&gt;isanfeng&lt;/a&gt; &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;#Github Workflow
###第一步：从仓库中fork项目&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;访问目标仓库：https://&lt;/li&gt;
  &lt;li&gt;点击页面上的fork，将目标项目复制到自己的仓库中
    &lt;blockquote&gt;
      &lt;p&gt;&lt;strong&gt;clone和fork的区别&lt;/strong&gt;&lt;br /&gt;
比如在仓库的主人（A）没有把我们添加为项目合作者的前提下，我们将A的某个仓库名为“B”的仓库clone到自己的电脑中，在自己的电脑进行修改，但是我们会发现我们没办法通过push将代码贡献到B中。所以要想将你的代码贡献到B中，
我们应该：
在A的仓库中fork项目B （此时我们自己的github就有一个一模一样的仓库B，但是URL不同）, 将我们修改的代码push到自己github中的仓库B中pull request ，主人就会收到请求，并决定要不要接受你的代码
###第二步：Clone刚fork的项目到本地&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;mkdir -p $working_dir
 cd $working_dir
 git clone https://github.com/$user/github-workflow.git
 # or: git clone git@github.com:$user/github-workflow.git&lt;/p&gt;

    &lt;p&gt;cd $working_dir/github-workflow
 git remote add upstream https://github.com/yangwenmai/github-workflow.git
 # or: git remote add upstream git@github.com:yangwenmai/github-workflow.git
 # Never push to the upstream master.
 git remote set-url –push upstream no_push
 # Confirm that your remotes make sense:
 # It should look like:
 # origin    git@github.com:$(user)/github-workflow.git (fetch)
 # origin    git@github.com:$(user)/github-workflow.git (push)
 # upstream  https://github.com/yangwenmai/github-workflow (fetch)
 # upstream  no_push (push)
 git remote -v&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;###第三步：开新分支&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd $working_dir/github-workflow
git fetch upstream
git checkout master
git rebase upstream/master 从master分支开新的特性分支
 
git checkout -b myfeature
# or: gcb myfeature ###第四步：开发 ####编码 你可以在你新创建的 myfeature 分支下编码。 ###第五步：保持你的特性分支 myfeature 是一直同步原始仓库的最新 master 代码

# While on your myfeature branch.
git fetch upstream
git rebase upstream/master 请不要用 git pull 代替 fetch/rebase，git pull 会创建一个 merge，并且会创建 merge commits。这些会使提交记录混乱和违反规则。你也可以考虑改变你的 .git/config 文件，通过 git config branch.autoSetupRebase 来改变 git pull 行为。 ###第六步：提交 提交你的变更

git commit ###第七步：推送

git push --set-upstream ${your_remote_name} myfeature ###第八步：创建一个push request 1. 访问你 fork 的项目：https://github.com/$user/github-workflow 2. 点击 Compare &amp;amp; Pull Request 按钮，基于你的 myfeature 分支 3. 填充必要的 PR 模板信息。 *** 接下来你就只需要等待原始项目的开发人员来审核你的提交即可。 以后如果你还要再开发新的特性或者修复一些 bug，你需要先同步更新项目，然后再创建新的分支，然后都可以按照以上步骤执行。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>流浪.三丰</name></author><category term="TEST2" /><category term="TEST1" /><summary type="html">Publish by isanfeng</summary></entry><entry><title type="html">Hello World！我的个人网站</title><link href="http://localhost:4000/github-workflow/" rel="alternate" type="text/html" title="Hello World！我的个人网站" /><published>2018-02-07T20:16:00+08:00</published><updated>2018-02-07T20:16:00+08:00</updated><id>http://localhost:4000/github-workflow</id><content type="html" xml:base="http://localhost:4000/github-workflow/">&lt;p&gt;&lt;span style=&quot;font-size:12px&quot;&gt;Publish by &lt;a href=&quot;https://isanfeng.github.io&quot; target=&quot;\_blank&quot;&gt;isanfeng&lt;/a&gt; &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;#Github Workflow
###第一步：从仓库中fork项目&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;访问目标仓库：https://&lt;/li&gt;
  &lt;li&gt;点击页面上的fork，将目标项目复制到自己的仓库中
    &lt;blockquote&gt;
      &lt;p&gt;&lt;strong&gt;clone和fork的区别&lt;/strong&gt;&lt;br /&gt;
比如在仓库的主人（A）没有把我们添加为项目合作者的前提下，我们将A的某个仓库名为“B”的仓库clone到自己的电脑中，在自己的电脑进行修改，但是我们会发现我们没办法通过push将代码贡献到B中。所以要想将你的代码贡献到B中，
我们应该：
在A的仓库中fork项目B （此时我们自己的github就有一个一模一样的仓库B，但是URL不同）, 将我们修改的代码push到自己github中的仓库B中pull request ，主人就会收到请求，并决定要不要接受你的代码
###第二步：Clone刚fork的项目到本地&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;mkdir -p $working_dir
 cd $working_dir
 git clone https://github.com/$user/github-workflow.git
 # or: git clone git@github.com:$user/github-workflow.git&lt;/p&gt;

    &lt;p&gt;cd $working_dir/github-workflow
 git remote add upstream https://github.com/yangwenmai/github-workflow.git
 # or: git remote add upstream git@github.com:yangwenmai/github-workflow.git
 # Never push to the upstream master.
 git remote set-url –push upstream no_push
 # Confirm that your remotes make sense:
 # It should look like:
 # origin    git@github.com:$(user)/github-workflow.git (fetch)
 # origin    git@github.com:$(user)/github-workflow.git (push)
 # upstream  https://github.com/yangwenmai/github-workflow (fetch)
 # upstream  no_push (push)
 git remote -v&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;###第三步：开新分支&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd $working_dir/github-workflow
git fetch upstream
git checkout master
git rebase upstream/master 从master分支开新的特性分支
 
git checkout -b myfeature
# or: gcb myfeature ###第四步：开发 ####编码 你可以在你新创建的 myfeature 分支下编码。 ###第五步：保持你的特性分支 myfeature 是一直同步原始仓库的最新 master 代码

# While on your myfeature branch.
git fetch upstream
git rebase upstream/master 请不要用 git pull 代替 fetch/rebase，git pull 会创建一个 merge，并且会创建 merge commits。这些会使提交记录混乱和违反规则。你也可以考虑改变你的 .git/config 文件，通过 git config branch.autoSetupRebase 来改变 git pull 行为。 ###第六步：提交 提交你的变更

git commit ###第七步：推送

git push --set-upstream ${your_remote_name} myfeature ###第八步：创建一个push request 1. 访问你 fork 的项目：https://github.com/$user/github-workflow 2. 点击 Compare &amp;amp; Pull Request 按钮，基于你的 myfeature 分支 3. 填充必要的 PR 模板信息。 *** 接下来你就只需要等待原始项目的开发人员来审核你的提交即可。 以后如果你还要再开发新的特性或者修复一些 bug，你需要先同步更新项目，然后再创建新的分支，然后都可以按照以上步骤执行。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>流浪.三丰</name></author><category term="TEST2" /><category term="TEST1" /><summary type="html">Publish by isanfeng</summary></entry><entry><title type="html">Hello World！我的个人网站</title><link href="http://localhost:4000/github-workflow/" rel="alternate" type="text/html" title="Hello World！我的个人网站" /><published>2018-02-07T20:16:00+08:00</published><updated>2018-02-07T20:16:00+08:00</updated><id>http://localhost:4000/github-workflow</id><content type="html" xml:base="http://localhost:4000/github-workflow/">&lt;p&gt;&lt;span style=&quot;font-size:12px&quot;&gt;Publish by &lt;a href=&quot;https://isanfeng.github.io&quot; target=&quot;\_blank&quot;&gt;isanfeng&lt;/a&gt; &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;#Github Workflow
###第一步：从仓库中fork项目&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;访问目标仓库：https://&lt;/li&gt;
  &lt;li&gt;点击页面上的fork，将目标项目复制到自己的仓库中
    &lt;blockquote&gt;
      &lt;p&gt;&lt;strong&gt;clone和fork的区别&lt;/strong&gt;&lt;br /&gt;
比如在仓库的主人（A）没有把我们添加为项目合作者的前提下，我们将A的某个仓库名为“B”的仓库clone到自己的电脑中，在自己的电脑进行修改，但是我们会发现我们没办法通过push将代码贡献到B中。所以要想将你的代码贡献到B中，
我们应该：
在A的仓库中fork项目B （此时我们自己的github就有一个一模一样的仓库B，但是URL不同）, 将我们修改的代码push到自己github中的仓库B中pull request ，主人就会收到请求，并决定要不要接受你的代码
###第二步：Clone刚fork的项目到本地&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;mkdir -p $working_dir
 cd $working_dir
 git clone https://github.com/$user/github-workflow.git
 # or: git clone git@github.com:$user/github-workflow.git&lt;/p&gt;

    &lt;p&gt;cd $working_dir/github-workflow
 git remote add upstream https://github.com/yangwenmai/github-workflow.git
 # or: git remote add upstream git@github.com:yangwenmai/github-workflow.git
 # Never push to the upstream master.
 git remote set-url –push upstream no_push
 # Confirm that your remotes make sense:
 # It should look like:
 # origin    git@github.com:$(user)/github-workflow.git (fetch)
 # origin    git@github.com:$(user)/github-workflow.git (push)
 # upstream  https://github.com/yangwenmai/github-workflow (fetch)
 # upstream  no_push (push)
 git remote -v&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;###第三步：开新分支&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd $working_dir/github-workflow
git fetch upstream
git checkout master
git rebase upstream/master 从master分支开新的特性分支
 
git checkout -b myfeature
# or: gcb myfeature ###第四步：开发 ####编码 你可以在你新创建的 myfeature 分支下编码。 ###第五步：保持你的特性分支 myfeature 是一直同步原始仓库的最新 master 代码

# While on your myfeature branch.
git fetch upstream
git rebase upstream/master 请不要用 git pull 代替 fetch/rebase，git pull 会创建一个 merge，并且会创建 merge commits。这些会使提交记录混乱和违反规则。你也可以考虑改变你的 .git/config 文件，通过 git config branch.autoSetupRebase 来改变 git pull 行为。 ###第六步：提交 提交你的变更

git commit ###第七步：推送

git push --set-upstream ${your_remote_name} myfeature ###第八步：创建一个push request 1. 访问你 fork 的项目：https://github.com/$user/github-workflow 2. 点击 Compare &amp;amp; Pull Request 按钮，基于你的 myfeature 分支 3. 填充必要的 PR 模板信息。 *** 接下来你就只需要等待原始项目的开发人员来审核你的提交即可。 以后如果你还要再开发新的特性或者修复一些 bug，你需要先同步更新项目，然后再创建新的分支，然后都可以按照以上步骤执行。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>流浪.三丰</name></author><category term="TEST2" /><category term="TEST1" /><summary type="html">Publish by isanfeng</summary></entry><entry><title type="html">Hello World！我的个人网站</title><link href="http://localhost:4000/github-workflow/" rel="alternate" type="text/html" title="Hello World！我的个人网站" /><published>2018-02-07T20:16:00+08:00</published><updated>2018-02-07T20:16:00+08:00</updated><id>http://localhost:4000/github-workflow</id><content type="html" xml:base="http://localhost:4000/github-workflow/">&lt;p&gt;&lt;span style=&quot;font-size:12px&quot;&gt;Publish by &lt;a href=&quot;https://isanfeng.github.io&quot; target=&quot;\_blank&quot;&gt;isanfeng&lt;/a&gt; &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;#Github Workflow
###第一步：从仓库中fork项目&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;访问目标仓库：https://&lt;/li&gt;
  &lt;li&gt;点击页面上的fork，将目标项目复制到自己的仓库中
    &lt;blockquote&gt;
      &lt;p&gt;&lt;strong&gt;clone和fork的区别&lt;/strong&gt;&lt;br /&gt;
比如在仓库的主人（A）没有把我们添加为项目合作者的前提下，我们将A的某个仓库名为“B”的仓库clone到自己的电脑中，在自己的电脑进行修改，但是我们会发现我们没办法通过push将代码贡献到B中。所以要想将你的代码贡献到B中，
我们应该：
在A的仓库中fork项目B （此时我们自己的github就有一个一模一样的仓库B，但是URL不同）, 将我们修改的代码push到自己github中的仓库B中pull request ，主人就会收到请求，并决定要不要接受你的代码
###第二步：Clone刚fork的项目到本地&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;p&gt;mkdir -p $working_dir
 cd $working_dir
 git clone https://github.com/$user/github-workflow.git
 # or: git clone git@github.com:$user/github-workflow.git&lt;/p&gt;

    &lt;p&gt;cd $working_dir/github-workflow
 git remote add upstream https://github.com/yangwenmai/github-workflow.git
 # or: git remote add upstream git@github.com:yangwenmai/github-workflow.git
 # Never push to the upstream master.
 git remote set-url –push upstream no_push
 # Confirm that your remotes make sense:
 # It should look like:
 # origin    git@github.com:$(user)/github-workflow.git (fetch)
 # origin    git@github.com:$(user)/github-workflow.git (push)
 # upstream  https://github.com/yangwenmai/github-workflow (fetch)
 # upstream  no_push (push)
 git remote -v&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;###第三步：开新分支&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd $working_dir/github-workflow
git fetch upstream
git checkout master
git rebase upstream/master 从master分支开新的特性分支
 
git checkout -b myfeature
# or: gcb myfeature ###第四步：开发 ####编码 你可以在你新创建的 myfeature 分支下编码。 ###第五步：保持你的特性分支 myfeature 是一直同步原始仓库的最新 master 代码

# While on your myfeature branch.
git fetch upstream
git rebase upstream/master 请不要用 git pull 代替 fetch/rebase，git pull 会创建一个 merge，并且会创建 merge commits。这些会使提交记录混乱和违反规则。你也可以考虑改变你的 .git/config 文件，通过 git config branch.autoSetupRebase 来改变 git pull 行为。 ###第六步：提交 提交你的变更

git commit ###第七步：推送

git push --set-upstream ${your_remote_name} myfeature ###第八步：创建一个push request 1. 访问你 fork 的项目：https://github.com/$user/github-workflow 2. 点击 Compare &amp;amp; Pull Request 按钮，基于你的 myfeature 分支 3. 填充必要的 PR 模板信息。 *** 接下来你就只需要等待原始项目的开发人员来审核你的提交即可。 以后如果你还要再开发新的特性或者修复一些 bug，你需要先同步更新项目，然后再创建新的分支，然后都可以按照以上步骤执行。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>流浪.三丰</name></author><category term="TEST1" /><summary type="html">Publish by isanfeng</summary></entry></feed>